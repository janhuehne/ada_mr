with Ada.Text_IO;
with Ada_Mr.Logger;
with Ada_Mr.Xml.Helper;


package body _Job is
  
  overriding function To_Xml(The_Job : Job) return String is
    Details : Ada_Mr.Helper.String_String_Maps.Map;
  begin
    -- Example:
    -- Details.Insert("key, "value");
    
    return Ada_Mr.Xml.Helper.Hash_To_Xml_String(Details);
  end To_Xml;
  
  
  overriding function From_Xml(Xml_Node : Ada_Mr.Xml.Node_Access) return Job is
    J : Job;
  begin
    J.Job_Id := Integer'Value(Ada_Mr.Xml.Get_Value(Xml_Node, "job_id"));
    
    return J;
  end From_Xml;
  
  
  procedure Split_Raw_Data is
  begin
    declare
      The_Job : Job;
    begin
      The_Job.Job_Id := Ada_Mr.Job.Get_Next_Job_Id;
      
      Calculated_Jobs.Append(The_Job);
    end;
  end Split_Raw_Data;
  
  
  overriding function Get_Next_Raw_Job return Job is
    J : Job := Calculated_Jobs.First_Element;
  begin
    Calculated_Jobs.Delete_First;
    
    return J;
  end Get_Next_Raw_Job;
  
  
--  overriding procedure Print_Job(The_Job : Job; State : String) is
--  begin
--    null;
--  end Print_Job;
  
  
  overriding procedure Compute_Job(The_Job : Job) is
  begin
    null;
  end Compute_Job;
  
  
  function Split_Result_For_Different_Reducer return Ada_Mr.Helper.String_String_Maps.Map is
    Mapping  : Ada_Mr.Helper.String_String_Maps.Map;
  begin
    -- Example:
    --  Mapping.Insert(
    --    "Reducer_1", 
    --    ""
    --  );
    
    return Mapping;
  end Split_Result_For_Different_Reducer;
  
  
  procedure Merge_Job_Results(Xml_Node : Ada_Mr.Xml.Node_Access; Stop_System : out Boolean) is
  begin
    null;
  end Merge_Job_Results;
  
  
  procedure Finalize is
  begin
    null;
  end Finalize;
  
end _Job;